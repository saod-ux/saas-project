// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
  STAFF
  VIEWER
}

enum MembershipStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentProvider {
  MYFATOORAH
  KNET
  STRIPE
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  settingsJson Json    @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Payment Gateway Settings
  myfatoorahApiKey String?
  myfatoorahSecretKey String?
  myfatoorahIsTest Boolean @default(true)
  knetMerchantId String?
  knetApiKey String?
  knetIsTest Boolean @default(true)
  stripePublishableKey String?
  stripeSecretKey String?
  stripeIsTest Boolean @default(true)

  // Relations
  memberships Membership[]
  products    Product[]
  orders      Order[]
  files       File[]
  invites     Invite[]
  carts       Cart[]
  payments    Payment[]

  @@map("tenants")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  phone     String?
  name      String?
  clerkId   String?  @unique // Clerk user ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships Membership[]
  invites     Invite[]      @relation("InvitedBy")
  invitedMemberships Membership[] @relation("InvitedBy")
  orders      Order[]
  payments    Payment[]
  carts       Cart[]

  @@map("users")
}

model Membership {
  id         String           @id @default(cuid())
  tenantId   String
  userId     String
  role       UserRole         @default(VIEWER)
  status     MembershipStatus @default(PENDING)
  invitedBy  String?
  invitedAt  DateTime?
  acceptedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relations
  tenant     Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter    User?            @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@unique([tenantId, userId])
  @@index([tenantId, status])
  @@map("memberships")
}

model Invite {
  id        String   @id @default(cuid())
  tenantId  String
  email     String
  role      UserRole @default(VIEWER)
  invitedBy String
  token     String   @unique
  expiresAt DateTime
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  inviter   User     @relation("InvitedBy", fields: [invitedBy], references: [id])

  @@index([tenantId, email])
  @@index([token])
  @@map("invites")
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  description String?
  price       Decimal  @db.Decimal(10, 2) // Base price (for simple products)
  currency    String   @default("USD")
  stock       Int      @default(0) // Base stock (for simple products)
  status      String   @default("active")
  hasVariants Boolean  @default(false) // Whether product uses variants
  seoJson     Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant       Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productImages ProductImage[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  productOptions ProductOption[]
  productVariants ProductVariant[]

  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@map("products")
}

model ProductOption {
  id        String   @id @default(cuid())
  productId String
  name      String   // e.g., "Size", "Color", "Material"
  required  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  optionValues      ProductOptionValue[]

  @@index([productId, order])
  @@map("product_options")
}

model ProductOptionValue {
  id              String   @id @default(cuid())
  productOptionId String
  value           String   // e.g., "S", "M", "L" or "Red", "Blue", "Green"
  order           Int      @default(0)
  createdAt       DateTime @default(now())

  // Relations
  productOption   ProductOption       @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  variantOptions  ProductVariantOption[]

  @@index([productOptionId, order])
  @@map("product_option_values")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  sku       String?  @unique // Stock Keeping Unit
  price     Decimal  @db.Decimal(10, 2)
  stock     Int      @default(0)
  weight    Decimal? @db.Decimal(8, 2) // in grams
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product        Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantOptions ProductVariantOption[]
  variantImages  ProductVariantImage[]
  cartItems      CartItem[]
  orderItems     OrderItem[]

  @@index([productId])
  @@index([sku])
  @@map("product_variants")
}

model ProductVariantOption {
  id                  String   @id @default(cuid())
  productVariantId    String
  productOptionValueId String
  createdAt           DateTime @default(now())

  // Relations
  productVariant      ProductVariant     @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productOptionValue  ProductOptionValue @relation(fields: [productOptionValueId], references: [id], onDelete: Cascade)

  @@unique([productVariantId, productOptionValueId])
  @@map("product_variant_options")
}

model ProductVariantImage {
  id              String   @id @default(cuid())
  productVariantId String
  fileId          String
  alt             String?
  order           Int      @default(0)
  createdAt       DateTime @default(now())

  // Relations
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  file           File           @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([productVariantId, order])
  @@map("product_variant_images")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  fileId    String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([productId, order])
  @@map("product_images")
}

model File {
  id         String   @id @default(cuid())
  tenantId   String
  key        String   @unique
  filename   String
  mimeType   String
  size       Int
  uploadedBy String
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())

  // Relations
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  productImages ProductImage[]
  variantImages ProductVariantImage[]

  @@index([tenantId, uploadedBy])
  @@map("files")
}

model Order {
  id            String      @id @default(cuid())
  tenantId      String
  userId        String
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2) @default(0)
  shipping      Decimal     @db.Decimal(10, 2) @default(0)
  total         Decimal     @db.Decimal(10, 2)
  currency      String      @default("USD")
  customerJson  Json        @default("{}")
  shippingJson  Json        @default("{}")
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payments  Payment[]

  @@index([tenantId, status])
  @@index([tenantId, createdAt])
  @@index([orderNumber])
  @@map("orders")
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  productId       String
  productVariantId String? // Optional: for variant-specific items
  quantity        Int
  price           Decimal @db.Decimal(10, 2)
  total           Decimal @db.Decimal(10, 2)
  variantData     Json    @default("{}") // Store selected options as JSON
  createdAt       DateTime @default(now())

  // Relations
  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant  ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_items")
}

model Cart {
  id       String   @id @default(cuid())
  tenantId String
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]

  @@unique([tenantId, userId])
  @@map("carts")
}

model CartItem {
  id              String  @id @default(cuid())
  cartId          String
  productId       String
  productVariantId String? // Optional: for variant-specific items
  quantity        Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  cart           Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@map("cart_items")
}

model Payment {
  id              String         @id @default(cuid())
  tenantId        String
  orderId         String
  userId          String
  provider        PaymentProvider
  providerOrderId String?        @unique
  amount          Decimal        @db.Decimal(10, 2)
  currency        String         @default("USD")
  status          PaymentStatus  @default(PENDING)
  metadata        Json           @default("{}")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([tenantId, status])
  @@index([orderId])
  @@index([providerOrderId])
  @@map("payments")
}
